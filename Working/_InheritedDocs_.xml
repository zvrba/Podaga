<doc>
  <assembly>
    <name>_InheritedDocs_</name>
  </assembly>
  <members>
  <member name="P:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Transient">
  
<summary>
            Transient tag to use by the collection.
            </summary></member><member name="P:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Root">
  
<summary>
            Root of the collection's underlying tree.  <c>null</c> for empty collection.
            </summary></member><member name="P:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.IsReadOnly">
  
<summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary><returns><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns></member><member name="P:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Count">
  
<summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary><returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Clear">
  
<summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception></member><member name="M:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Contains(`0)">
  
<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary><param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param><returns><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.Remove(`0)">
  
<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary><param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception><returns><see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.CopyTo(`0[],System.Int32)">
  
<summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary><param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception></member><member name="M:Podaga.PersistentCollections.Tree.CollectionTreeAdapter`2.GetEnumerator">
  
<summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns></member><member name="P:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.Item(`0)">
  
<summary>Gets or sets the element with the specified key.</summary><param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception><returns>The element with the specified key.</returns></member><member name="P:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.Keys">
  
<summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary><returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns></member><member name="P:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.Values">
  
<summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary><returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.Add(`0,`1)">
  
<summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary><param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception></member><member name="M:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.ContainsKey(`0)">
  
<summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary><param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.Remove(`0)">
  
<summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary><param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception><returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.DictionaryTreeAdapter`3.TryGetValue(`0,`1@)">
  
<summary>Gets the value associated with the specified key.</summary><param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.JoinableTreeNode`1.GetEnumerator">
  
<summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns></member><member name="P:Podaga.PersistentCollections.Tree.ReadOnlyListTreeAdapter`2.Item(System.Int32)">
  
<summary>Gets the element at the specified index in the read-only list.</summary><param name="index">The zero-based index of the element to get.</param><returns>The element at the specified index in the read-only list.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.SetEquals(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determines whether the current set and the specified collection contain the same elements.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the current set is equal to other; otherwise, <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determine whether the current set is a subset of a specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the current set is a proper subset of other; otherwise <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determine whether the current set is a super set of a specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the current set is a subset of other; otherwise <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the collection is a proper superset of other; otherwise <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.Overlaps(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Determines whether the current set overlaps with the specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception><returns><see langword="true" />if the current set and other share at least one common element; otherwise, <see langword="false" />.</returns></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.UnionWith(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Removes all elements in the specified collection from the current set.</summary><param name="other">The collection of items to remove from the set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception></member><member name="M:Podaga.PersistentCollections.Tree.SetTreeAdapter`2.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
  
<summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</summary><param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other" /> is <see langword="null" />.</exception></member></members>
</doc>