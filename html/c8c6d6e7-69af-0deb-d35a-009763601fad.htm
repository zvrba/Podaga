<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>TreeIterator&lt;TValue&gt; Structure</title><meta name="Title" content="TreeIterator&lt;TValue&gt;" /><meta name="Help.Id" content="T:Podaga.JoinableTree.TreeIterator`1" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Podaga.JoinableTree" /><meta name="guid" content="c8c6d6e7-69af-0deb-d35a-009763601fad" /><meta name="Description" content="Provides iterative tree navigation algorithms. At its core, this struct implements a stack, whereas the actual algorithms are implemented as extension methods on class." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Podaga libraries</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Tree<wbr />Iterator<span id="LST32981CED_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="typeparameter">TValue</span><span id="LST32981CED_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span> Structure</h1><div class="summary"><p>
            Provides iterative tree navigation algorithms.  At its core, this struct implements a stack, whereas the actual
            algorithms are implemented as extension methods on <a href="59f077d9-a91e-8122-89f7-86d2cd7366c7.htm">IteratorAlgorithms</a> class.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="fef6a5ef-9329-cbcb-8a7e-5ae13dbf76a1.htm">Podaga.JoinableTree</a><br /><strong>Assembly:</strong> Podaga.JoinableTree (in Podaga.JoinableTree.dll) Version: 1.0.0+878b99f1cf078278215b564bee154302b889b650<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="identifier">TreeIterator</span>&lt;TValue&gt;
</code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">TreeIterator<span id="LST32981CED_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TValue<span id="LST32981CED_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></span></dd></dl><h4>Type Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">TValue</span></dt><dd>Value type held by tree nodes.</dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><p>
            WARNING:  This is a mutable struct.
            </p><p>
            WARNING: Iterating over a tree that is simultaneously being modified yields unspecified results.  The modification
            does not need to be concurrent either, e.g., using <span class="code">Succ</span> or <span class="code">Pred</span> while inserting or deleting elements
            will also lead to unspecified results.
            </p><p>
            The <a href="97e43675-a9fd-f68a-ae66-ca4c26a2d8f7.htm">IsNull</a> property on a <span class="code">default</span> instance is true, and
            no other methods or properties on it may be accessed.  For performance reasons, no methods or properties perform
            error checking on their own; instead they rely on the runtime throwing <a href="https://learn.microsoft.com/dotnet/api/system.nullreferenceexception" target="_blank" rel="noopener noreferrer">NullReferenceException</a> or
            <a href="https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception" target="_blank" rel="noopener noreferrer">IndexOutOfRangeException</a>.
            </p><p>
            Copying of an iterator is shallow: the "original" and its "copy" will share the same underlying stack array.
            For deep copying, use the copy constructor.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDADFASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="b47afcb7-bc9a-b643-a057-d418b691d15d.htm">TreeIterator<span id="LST32981CED_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TValue<span id="LST32981CED_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(Int32)</a></td><td>
            Constructor.  Allocates space for <span class="parameter">capacity</span> nodes.
            </td></tr><tr><td><a href="6e8cc8c9-a658-aacf-7d56-df48f4fa9db0.htm">TreeIterator<span id="LST32981CED_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TValue<span id="LST32981CED_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span>(TreeIterator<span id="LST32981CED_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TValue<span id="LST32981CED_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copy constructor: copies all fields and the stack array, but not the nodes.  The new
            stack has the same capacity as <span class="parameter">other</span>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDMFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="25c5bf22-352c-8183-e812-edd67b3d9677.htm">IsEmpty</a></td><td>
            True when there are no elements on the stack.
            </td></tr><tr><td><a href="97e43675-a9fd-f68a-ae66-ca4c26a2d8f7.htm">IsNull</a></td><td>
            True when <span class="code">this</span> is <span class="code">default</span> instance.  No methods may be invoked.
            </td></tr><tr><td><a href="9e50ff7f-915b-1bb7-72cd-65be6d92bcc8.htm">Top</a></td><td>
            A reference to the top node on the stack which is at index <span class="code">Count - 1</span>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDEFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="bfb62248-6ab7-4e42-ed65-00122525a279.htm">Clear</a></td><td>
            Removes all elements from the stack.
            (NB! Only resets the stack pointer, the contents of <a href="dc1a6950-1695-cef8-12e7-a791ea122f6b.htm">Path</a> array is unchanged.)
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Indicates whether this instance and a specified object are equal.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Returns the hash code for this instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="8263d6f6-683e-7dda-b48e-23ae3ceeeaa2.htm">New</a></td><td>
            Utility method to create a new allocated instance with default capacity.
            </td></tr><tr><td><a href="ab8c8842-c5e2-cbf9-60e2-1672de7939ff.htm">Push</a></td><td>
            Pushes a node onto the stack.  <span class="parameter">node</span> must not be null (checked only in debug builds).
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns the fully qualified type name of this instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="3aa3a64e-81ac-b2ad-e536-e8c252f2f748.htm">TryPop</a></td><td>
            Attempts to pop the top node from the stack.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAFASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="464d0266-27c2-1228-d2e3-ae1d425d83b0.htm">DefaultCapacity</a></td><td>
            Default capacity allocated by the stack.  This should be sufficient for any balanced tree of up to 4G elements.
            </td></tr><tr><td><a href="87744d67-4016-5fa9-c694-19c8713aaaeb.htm">Depth</a></td><td>
            Number of elements on the stack.
            </td></tr><tr><td><a href="dc1a6950-1695-cef8-12e7-a791ea122f6b.htm">Path</a></td><td>
            Tree traversal stack; root is always at index 0 (bottom) and the current node at <span class="code">Count-1</span>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="fef6a5ef-9329-cbcb-8a7e-5ae13dbf76a1.htm">Podaga.JoinableTree Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>