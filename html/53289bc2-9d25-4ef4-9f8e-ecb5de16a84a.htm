<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Getting started with tree framework</title><meta name="Title" content="Getting started with tree framework" /><meta name="Help.Id" content="53289bc2-9d25-4ef4-9f8e-ecb5de16a84a" /><meta name="Help.ContentType" content="How To" /><meta name="guid" content="53289bc2-9d25-4ef4-9f8e-ecb5de16a84a" /><meta name="Description" content="This article shows how to get started with the tree framework using collection adapter." /><meta name="tocFile" content="../toc/IDB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Podaga libraries</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Getting started with tree framework</h1><div><p>This article shows how to get started with the tree framework using collection adapter.</p></div><h3 class="quickLinkHeader">Define a tree holding integers</h3><div><ol><li><p>
              Create <em>value traits</em> for the given element type.  Traits determine how values are compared, and how
              augmentation data is combined when updating tree nodes.  When using augmentation data, it must be a part of the
              value stored in the tree.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public interface IIntValueTraits : IValueTraits&lt;int&gt;
{
    static int IValueTraits&lt;int&gt;.NilTag {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get =&gt; default;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static void IValueTraits&lt;int&gt;.CombineTags(int left, ref int result, int right) { }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static int IValueTraits&lt;int&gt;.Compare(int left, int right) =&gt;
        left &lt; right ? -1 : left &gt; right ? 1 : 0;
}</code></pre></div></div><p>
              In this example, no augmentation data is used, so the definition of <a href="0a500fb6-a09e-ce41-a7d2-076c1bcec903.htm">NilTag</a>
              and <a href="97697880-b7c0-b8fa-f5c1-59847ff7ee2a.htm">CombineTags</a>
              is trivial.  Implementation of <a href="a80b56a0-156d-7b82-7c3c-f18780b60bf1.htm">Compare</a>
              follows the standard comparer conventions.
            </p><p>
              Note that methods are implemented as <em>explicit</em> (static) interface methods.  This is required to provide implementations
              of abstract methods from <a href="015295d9-eda8-3048-76e1-89e1a1fa5c37.htm">IValueTraits<span id="LST62208711_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TValue<span id="LST62208711_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </p></li><li><p>To define a tree type, combine value traits with a tree join strategy.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">public struct AvlIntTree : IIntValueTraits, IAvlJoin&lt;AvlIntTree, int&gt;
{
}

public struct WBIntTree : IIntValueTraits, IWBJoin&lt;WBIntTree, int&gt;
{
}</code></pre></div></div><p>
              Here, we define AVL and weight-balanced trees.  The types are defined as structs so that calling are specialized during JIT phase;
              they need no additional members as all needed behavior is inherited through interfaces.  Note that a CRTP pattern is used where
              the <em>struct itself</em> is used as the first generic argument for the join strategy interface.
            </p></li><li><p>
              Once we have a tree type, we can construct an <em>empty tree</em> by declaring
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">JoinableTreeNode&lt;int&gt; root = null;</code></pre></div></div><p>
              and using extension methods on <a href="93d88823-e7b4-0812-26cb-5aa28c19e71c.htm">JoinableTreeNode<span id="LST62208711_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>TValue<span id="LST62208711_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
              (Standard tree algorithms are implemented as extension methods.)  However, it is far easier to use one of provided collection adapter classes:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">[Benchmark]
public void AvlTree() {
    var tree = new CollectionTreeAdapter&lt;int, AvlIntTree&gt;();
    for (int i = 0; i &lt; data.Length; ++i)
        tree.Add(data[i]);
    for (int i = data.Length - 1; i &gt;= 0; --i)
        tree.Remove(data[i]);
}</code></pre></div></div></li></ol></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Robust Programming</h2><div id="IDGABSection"><p>
          When using augmentation data, the value stored in the tree is logically divided into two parts:
        </p><ol><li><p>The <em>key</em> part.
          </p></li><li><p>The <em>augmentation</em> part.
          </p></li></ol><p>
          To maintain the correctness of tree algorithms, the key part <strong>MUST</strong> be treated as immutable at all times.
          This is important to keep in mind when accessing nodes directly or implementing <a href="97697880-b7c0-b8fa-f5c1-59847ff7ee2a.htm">CombineTags</a>
          method.
        </p></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Define a tree holding integers</a></li><li><a class="quickLink">Robust Programming</a></li></ul></nav></div></div></div></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>